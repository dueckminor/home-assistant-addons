#!/usr/bin/env python3

import os
import sys
import subprocess
import signal
import time
import json
from pathlib import Path

# Configuration
WORKSPACE_ROOT = Path(__file__).parent.parent
PID_FILE = WORKSPACE_ROOT / "gen" / ".dev_servers.json"

SERVICES = [
    {
        "name": "auth",
        "path": WORKSPACE_ROOT / "web" / "auth",
        "command": ["./node_modules/.bin/vite", "serve"],
        "port": 3000
    },
    {
        "name": "gateway", 
        "path": WORKSPACE_ROOT / "web" / "gateway",
        "command": ["./node_modules/.bin/vite", "serve"],
        "port": 3001
    }
]

def load_pids():
    """Load PIDs from file"""
    if PID_FILE.exists():
        try:
            with open(PID_FILE) as f:
                return json.load(f)
        except:
            return {}
    return {}

def save_pids(pids):
    """Save PIDs to file"""
    with open(PID_FILE, 'w') as f:
        json.dump(pids, f, indent=2)

def is_process_running(pid):
    """Check if a process is still running"""
    try:
        os.kill(pid, 0)
        return True
    except OSError:
        return False

def start_service(service):
    """Start a single service"""
    print(f"Starting {service['name']} server...")
    
    # Create log files for output
    log_dir = WORKSPACE_ROOT / "gen" / "logs"
    log_dir.mkdir(exist_ok=True)
    
    stdout_log = log_dir / f"{service['name']}.stdout.log"
    stderr_log = log_dir / f"{service['name']}.stderr.log"
    
    # Start the process completely detached
    with open(stdout_log, 'w') as stdout_file, open(stderr_log, 'w') as stderr_file:
        process = subprocess.Popen(
            service['command'],
            cwd=service['path'],  # Set working directory here instead of os.chdir
            stdout=stdout_file,
            stderr=stderr_file,
            stdin=subprocess.DEVNULL,  # Detach from stdin
            preexec_fn=os.setsid  # Create new process group
        )
    
    # Give it a moment to start
    time.sleep(0.5)
    
    # Check if it's still running (didn't crash immediately)
    if process.poll() is None:
        print(f"âœ“ {service['name']} started (PID: {process.pid}) on port {service['port']}")
        print(f"  Logs: {stdout_log}")
        return process.pid
    else:
        raise Exception(f"Process exited immediately with code {process.returncode}")

def stop_service(service_name, pid):
    """Stop a single service"""
    try:
        # Kill the process group to ensure child processes are also killed
        os.killpg(os.getpgid(pid), signal.SIGTERM)
        
        # Wait a bit for graceful shutdown
        time.sleep(2)
        
        # Force kill if still running
        try:
            os.killpg(os.getpgid(pid), signal.SIGKILL)
        except:
            pass
            
        print(f"âœ“ {service_name} stopped (PID: {pid})")
    except Exception as e:
        print(f"âš  Could not stop {service_name} (PID: {pid}): {e}")

def start_servers():
    """Start all development servers"""
    pids = load_pids()
    
    # Clean up dead processes
    for service_name in list(pids.keys()):
        if not is_process_running(pids[service_name]):
            print(f"âš  {service_name} (PID: {pids[service_name]}) is no longer running")
            del pids[service_name]
    
    started_any = False
    
    for service in SERVICES:
        service_name = service['name']
        
        if service_name in pids and is_process_running(pids[service_name]):
            print(f"âœ“ {service_name} already running (PID: {pids[service_name]}) on port {service['port']}")
        else:
            try:
                pid = start_service(service)
                pids[service_name] = pid
                started_any = True
            except Exception as e:
                print(f"âœ— Failed to start {service_name}: {e}")
    
    save_pids(pids)
    
    if started_any:
        print("\nðŸš€ Development servers are running:")
        for service in SERVICES:
            if service['name'] in pids:
                print(f"  - {service['name']}: http://localhost:{service['port']}")
        print(f"\nTo stop servers: {sys.argv[0]} stop")

def stop_servers():
    """Stop all development servers"""
    pids = load_pids()
    
    if not pids:
        print("No running development servers found.")
        return
    
    for service_name, pid in pids.items():
        if is_process_running(pid):
            stop_service(service_name, pid)
        else:
            print(f"âš  {service_name} (PID: {pid}) was already stopped")
    
    # Clean up PID file
    if PID_FILE.exists():
        PID_FILE.unlink()
    
    print("ðŸ›‘ All development servers stopped.")

def show_status():
    """Show status of development servers"""
    pids = load_pids()
    
    if not pids:
        print("No development servers are running.")
        return
    
    print("Development server status:")
    for service in SERVICES:
        service_name = service['name']
        if service_name in pids:
            pid = pids[service_name]
            if is_process_running(pid):
                print(f"  âœ“ {service_name}: running (PID: {pid}) on port {service['port']}")
            else:
                print(f"  âœ— {service_name}: stopped (stale PID: {pid})")
        else:
            print(f"  âœ— {service_name}: not running")

def main():
    if len(sys.argv) != 2:
        print("Usage: ./scripts/serve <start|stop|status>")
        sys.exit(1)
    
    command = sys.argv[1].lower()
    
    if command == "start":
        start_servers()
    elif command == "stop":
        stop_servers()
    elif command == "status":
        show_status()
    else:
        print("Invalid command. Use: start, stop, or status")
        sys.exit(1)

if __name__ == "__main__":
    main()